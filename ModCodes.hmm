Code "Sonic Combat Changes" by "Icedude_907"
//
#include "BlackboardStatus" noemit
#lib "Player"
#lib "BlackboardBattle"
#import "Blackboard"
#lib "VectorHelpers"
#import "States"
#load "System.Numerics.dll"

using System.Numerics;
using System.Runtime.InteropServices;

const float QuickCyloopEnergyCost = 40.0f; // player_common quickCyloop cost must be 0.
const float CrossSlashEnergyCost = 60.0f;
const float HitPhantomRushCost = 40.0f;    // Penalty for being hit before hitting the ground. (1/3rd)
// NOTE: Currently this still allows links. A better solution would be to remove the combo table for a duration of the dodge.
const float BracerOutOfControlTime = 0.5f; // Prevents spamming AXB for combo links out of recovery.

static bool IsCrossSlashing = false;
static bool IsQuickCylooping = false;

// static System.Numerics.Quaternion dodgeDir; // Might need to cache the previous frame to prevent unusual directions.
static bool KBWithPhantom = false;
static bool IsKnockedBack = false;
static float? BracerOutOfControl = null;
static System.Numerics.Quaternion backDirection; // From last frame
// static bool IsRecoverySmashing = false;

// TODO: Merge into HMMCodes
[StructLayout(LayoutKind.Explicit, Size = 0x100)]
public struct BattleData{
    /// An instance of `app::player::BlackboardContent`, the base class for `app::player::BlackboardBattle`.
    [FieldOffset(0)]    public BlackboardContent BlackboardContent;
    /// The number of attack combos performed by the player.
    [FieldOffset(0xA8)] public int ComboCount;
    /// The value of the Phantom Rush gauge.
    [FieldOffset(0xAC)] public float PhantomRushAmount;
    /// The value of the Quick Cyloop gauge.
    [FieldOffset(0xB8)] public float QuickCyloopAmount;

    /// <summary>
    /// Contains various flags
    /// bit 6 - Is Phantom Rush Active
    /// </summary>
    [FieldOffset(0xF0)] public byte flags1;
    // I found this value by tracing the QuickCyloopAmount in Cheat Engine and then monitoring the adjacent memory till I found a flag that triggered when emptying gague.
    /// Is the Quick Cyloop gauge active (false) or recharging (true)
    [FieldOffset(0xF1)] public bool QuickCyloopRecharging;

}
//
{
    // Remove energy and recharge if emptied out.
    bool deductQuickCyloopEnergy(BattleData* pBlackboardBattle, float amount){
        var newAmount = pBlackboardBattle->QuickCyloopAmount - amount;
        if(newAmount < 0.0){
            newAmount = 0.0f;
            pBlackboardBattle->QuickCyloopRecharging = true;
        }
        pBlackboardBattle->QuickCyloopAmount = newAmount;

        return true;
    }

    // ---------
    // Main code.
    // -----------

    if (Player.GetPlayerType() != Player.PlayerType.Sonic){
        return;
    }

    var PlayerState = Player.State.GetCurrentStateID<Sonic.StateID>();
    var pBlackboardBattle = (BattleData*)BlackboardBattle.Get();

    // TODO: Explore potential move properties in the binary rather than amending.
    // TODO: Figure out how to create move targets, edit lock on range, and check lock on range.

    // Logic for enhanced Cross Slash
    // Input is TransitAir(Targeted) from SonicBoom with the Cyloop button - see player_common.rfl
    if(pBlackboardBattle != null // I have no idea how people discovered this but its really amazing how deep people traversed the tree.
    && PlayerState == Sonic.StateID.StateCrossSlash
    ){
        if(pBlackboardBattle->QuickCyloopRecharging){ // Cancel the move
            Player.State.Restore<Sonic.StateID>(Sonic.StateID.StateSonicBoomKick);
        }else if(!IsCrossSlashing){ // Deduct QuickCyloop Energy when inputting the move only on the first frame.
            IsCrossSlashing = true;
            deductQuickCyloopEnergy(pBlackboardBattle, CrossSlashEnergyCost);
        }
    }else{
        var wasCrossSlashing = IsCrossSlashing;
        IsCrossSlashing = false;
        // Post move auto transition into sonic boom (can't be done in player_common unless you repress the button - which causes an offset teleport (statecombowarp).)
        if(wasCrossSlashing && Player.Input.IsDown(Player.InputActionType.PlayerSonicboom)){
            Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateSonicBoomKick);
        }
        // TODO: Post move buffer transition into self.
    }

    // Logic for Quick Cyloop
    // Due to a bug in the game, an Energy level below QuickCyloopEnergyCost cannot ever activate moves.
    // In normal gameplay since QuickCyloop always uses 50% this never triggers, but now we have CrossSlash using different energy amounts so this can be triggered.
    // Therefore we set the internal energy cost to 0, and deduct energy externally here.
    if(pBlackboardBattle != null && PlayerState == Sonic.StateID.StateQuickCyloop){
        if(!IsQuickCylooping){
            deductQuickCyloopEnergy(pBlackboardBattle, QuickCyloopEnergyCost);
        }
        IsQuickCylooping = true;
    }else{
        IsQuickCylooping = false;
    }

    // Logic for Homing Shot Cancels
    if(PlayerState == Sonic.StateID.StateHomingShot){
        // TODO: Parry canceliing
        // Dodge cancelling (by default this sends backwards which is a fair trade off)
        if( Player.Input.IsPressed(Player.InputActionType.PlayerLeftStep) ||
            Player.Input.IsPressed(Player.InputActionType.PlayerRightStep)
        ){
            Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateAvoid);
        }
        // Stomp cancelling
        if(Player.Input.IsPressed(Player.InputActionType.PlayerStomping)){
            Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateStompingDown);
        }
    }

    // Logic for Recovery Smash
    // TODO: Hide the button prompt when no action is possible (requires reverse engineering).
    if(BracerOutOfControl > 0.0){
        SET_WORLD_FLAG(IsOutOfControl, true);
        BracerOutOfControl -= (float)Time.GetDeltaTime();
    }else{
        SET_WORLD_FLAG(IsOutOfControl, false);
        BracerOutOfControl = null;
    }

    if(pBlackboardBattle == null) return;

    var isPhantomRushActive = ((pBlackboardBattle->flags1 & 0b0100_0000) != 0);
    if(PlayerState == Sonic.StateID.StateDamageBlowOff || PlayerState == Sonic.StateID.StateDamageBlowOffHeavy){
        // Phantom rush penalty for being hit (though other characters may have their combo counter affected?).
        if(!IsKnockedBack){
            KBWithPhantom = isPhantomRushActive;
            var newAmount = pBlackboardBattle->PhantomRushAmount - HitPhantomRushCost;
            pBlackboardBattle->PhantomRushAmount = (newAmount >= 0) ? newAmount : 0;
            // TODO: Player.State.Redirect<Sonic.StateID>(Sonic.StateID.StateSmash, Sonic.StateID.StateParry);
            // Redirecting a state earlier in the frame prevents the spin charge sfx playing without visual issues.
        }
        backDirection = VectorHelpers.LookRotation(-Player.Kinematics.GetForward());
        IsKnockedBack = true;
    }else if(PlayerState == Sonic.StateID.StateSmash && IsKnockedBack){ // Runs on the first frame if prompt executed
        if(!KBWithPhantom){
            // TODO: Shorten distance.
            Player.State.SetState<Sonic.StateID, StateAvoidParameter>(Sonic.StateID.StateAvoid, new StateAvoidParameter(backDirection));
            BracerOutOfControl = BracerOutOfControlTime;
        }else{
            pBlackboardBattle->PhantomRushAmount = 0;
        }
        IsKnockedBack = false;
        KBWithPhantom = false;
    }else{ // Normal gameplay
        IsKnockedBack = false;
        KBWithPhantom = false;
    }
    // Phantom rush cannot end while you're being knocked down.
    // This effect is purely visual, as your action is decided on the first frame of being hit.
    // If someone notices this without checking the code I'll be quite impressed.
    if(KBWithPhantom){
        if(pBlackboardBattle->PhantomRushAmount < 1.0f){ pBlackboardBattle->PhantomRushAmount = 1.0f; }
        pBlackboardBattle->flags1 |= 0b0100_0000;
    }else if(Player.Status.IsGrounded()){
        KBWithPhantom = false;
    }
}

Code "Super Sonic damage normalisation" by "Icedude_907" does "Reduces the impact of attack level scaling on Super Sonic."
//
    #include "Reflection" noemit
    #lib "Reflection"
    #lib "SonicParameters"
    #lib "BlackboardItem"

    const float _ssScale = 2; // Multiplier from min to max damage

    static bool _superSetup = false;
    static Reflection.ReflectionInfo<SonicParameters.Root> _sonicParametersInfo;
    // Base Sonic's damageMax is dictated by player_common.rfl (normally 3x)
    static ushort _sonicMax = 0; // Cache
//
{
    if(BlackboardStatus.IsSuper() && !_superSetup){
        _superSetup = true;
        _sonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
        // Cache
        _sonicMax = RFL_GET_PARAM(_sonicParametersInfo, common.commonPackage.attack.common.offensive.pointMax));
        // Set
        var max = (ushort)(_ssScale * (float)RFL_GET_PARAM(_sonicParametersInfo, common.commonPackage.attack.common.offensive.pointMin));
        RFL_SET_PARAM(_sonicParametersInfo, common.commonPackage.attack.common.offensive.pointMax, max);
    }else if(_superSetup){
        _sonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
        // Restore
        RFL_SET_PARAM(_sonicParametersInfo, common.commonPackage.attack.common.offensive.pointMax, _sonicMax);
        _superSetup = false;
    }
}

Code "Weaken Phantom Rush on non-combo attacks" by "Icedude_907"
//
    #include "Reflection" noemit
    #lib "Reflection"
    #lib "SonicParameters"
    #lib "Player"

    // The normal phantom rush damage is in player_common.
    const float _nonJabPhantomMultiplier = 2.0F;
    static float? _sonicJabMul; // Cache
//
{
    // This doesnt seem to work

    // TODO: Persuit kick animation could be changed to a teleport/motion smear and sell the effect
    bool isStateJab(Sonic.StateID id){
        return id == Sonic.StateID.StateAcceleCombo1
            || id == Sonic.StateID.StateAcceleCombo2
            || id == Sonic.StateID.StateHomingFinish
            ;
    }

    // MAIN
    if(Player.GetPlayerType() != Player.PlayerType.Sonic){
        return;
    }

    var _sonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
    if (_sonicParametersInfo == null || _sonicParametersInfo.pData == null){ return; }
    if( _sonicJabMul == null ){
        _sonicJabMul = RFL_GET_PARAM(_sonicParametersInfo, common.commonPackage.attack.common.offensive.shapeDamageRate);
    }

    var PlayerState = Player.State.GetCurrentStateID<Sonic.StateID>();
    if( isStateJab(PlayerState) ){
        RFL_SET_PARAM(_sonicParametersInfo, common.commonPackage.attack.common.offensive.shapeDamageRate, _sonicJabMul ?? 0);
    }else{
        RFL_SET_PARAM(_sonicParametersInfo, common.commonPackage.attack.common.offensive.shapeDamageRate, _nonJabPhantomMultiplier / 4);
        var m = RFL_GET_PARAM(_sonicParametersInfo, common.commonPackage.attack.common.offensive.shapeDamageRate);
    }
}

Code "Pursuit Attack Tricks" in "Animation/Sonic" by "Icedude_907 (Original: Hyper & Ahremic)" does "Replaces the Pursuit attack finish animation with randomised trick animations."
//
    #include "Helpers" noemit

    #lib "Memory"
    #lib "Player"

    using System.Runtime.InteropServices;

    static bool _isInitialised = false;
    static sbyte _playerType = -1;
    static bool _isPursuiting = false;

    static Random _random = new Random();
    static string[] _animVariations = new[] { /*"U",*/ "D", /*"L", "R"*/ };

    static float _animSpeed = 0.5f;
    static IntPtr _pAnimName = Marshal.AllocHGlobal(14);
//
{
    string randAnimName = $"JUMP_TRICK_{_animVariations[_random.Next(0, _animVariations.Length)]}{_random.Next(0, 3)}\0";
    Marshal.Copy(System.Text.Encoding.UTF8.GetBytes(randAnimName), 0, _pAnimName, randAnimName.Length);

    var PlayerState = Player.State.GetCurrentStateID<Sonic.StateID>();
    if(Player.GetPlayerType() == Player.PlayerType.Sonic && PlayerState == Sonic.StateID.StatePursuitKick) {
        _isPursuiting = true;
    }else{
        _isPursuiting = false;
    }

    if(!_isInitialised){ // NOTE: These addresses may not be correct for 1.41
        /* 0x140823825 */
        long playAnimCallerAddr = ScanSignature(
            "\xE8\xCC\xCC\xCC\xCC\x33\xD2\x49\x8B\xCE\xE8\xCC\xCC\xCC\xCC\x41\xB8\x74\x00\x00\x00",
            "x????xxxxxx????xxxxxx"
        );

        /* 0x14086F023 */
        long setAnimSpeedCallerAddr = ScanSignature(
            "\xE8\xCC\xCC\xCC\xCC\x48\x8D\x05\xCC\xCC\xCC\xCC\xB9\x03\x00\x00\x00",
            "x????xxx????xxxxx"
        );

        /* 0x1407C9300 */
        long playAnimFuncAddr = Memory.ReadCall(playAnimCallerAddr);
        /* 0x1407C9DB0 */
        long setAnimSpeedFuncAddr = Memory.ReadCall(setAnimSpeedCallerAddr);

        // Persuit
        fixed (sbyte* p_playerType = &_playerType)
        fixed (bool* p_isPursuiting = &_isPursuiting)
        fixed (float* p_animSpeed = &_animSpeed){
            WriteAsmHook(
                $@"
                    mov   rdx, {(long)p_playerType}     ; Skip if non-sonic
                    cmp   byte ptr [rdx], 0
                    jne   default
                    mov   rdx, {(long)p_isPursuiting}   ; Skip if not a persuit attack (homing, etc)
                    cmp   byte ptr [rdx], 0             ; Not efficient asm but who minds.
                    je    default

                    mov   rdx, {(long)p_animSpeed}
                    movss xmm2, dword ptr [rdx]
                    mov   rdx, {TO_STRING_PTR("SPEED_RATIO")}
                    mov   rcx, rax
                    mov   rax, {setAnimSpeedFuncAddr}
                    mov   rbx, rcx
                    call  rax
                    mov   rdx, {_pAnimName}
                    mov   rcx, rbx
                    mov   rax, {playAnimFuncAddr}
                    call  rax
                    jmp   exit
                default:
                    mov   rdx, {TO_STRING_PTR("ATTACK_BOUNCE")}
                    mov   rcx, rax
                    mov   rax, {playAnimFuncAddr}
                    call  rax
                exit:
                ",

                /* 0x14082381B */
                playAnimCallerAddr - 0x0A,

                HookBehavior.Replace
            );
        }
        _isInitialised = true;
    }

    _playerType = (sbyte)Player.GetPlayerType();
}

Code "Allow Slide During Auto Run" by "Icedude_907"
//
    #include "BlackboardStatus" noemit
    #lib "Player"
    #import "Plugins"

    enum QuickStepDir{
        None, Left, Right
    }

    static float? _timer = null;
    static QuickStepDir _quickstepLastDirection = QuickStepDir.None;
    const float _quickstepDelay = 0.06f;
//
{
    if (!IS_WORLD_FLAG(IsAutoRun))
        return;

    if (Player.Input.IsPressed(Player.InputActionType.PlayerStomping) && Player.Status.IsGrounded()){
        _quickstepLastDirection = QuickStepDir.None;
        _timer = null;
        Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateSliding);
    }
    // Allow a player to start quickstepping while sliding,
    // but only act on it once they've stood up again. (delay)
    if(_timer != null){ _timer -= Time.GetDeltaTime(); }
    if(Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSliding){
        if(Player.Input.IsPressed(Player.InputActionType.PlayerLeftStep)){
            _quickstepLastDirection = QuickStepDir.Left;
        }
        if(Player.Input.IsPressed(Player.InputActionType.PlayerRightStep)){
            _quickstepLastDirection = QuickStepDir.Right;
        }

        if(_quickstepLastDirection != QuickStepDir.None){
            _timer = _quickstepDelay;
            Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateRun);
        }
    }

    // Console.WriteLine($"Timer: {_timer}")
    if(_timer != null && _timer <= 0.0f){
        var isRight = _quickstepLastDirection == QuickStepDir.Right;
        if(StatePluginQuickStep.IsQuickStepLegal(isRight) && Player.Status.IsGrounded()){
            var stateId = (_quickstepLastDirection == QuickStepDir.Right) ? Sonic.StateID.StateQuickStepRight : Sonic.StateID.StateQuickStepLeft;
            Player.State.SetState<Sonic.StateID>(stateId);
        }

        _timer = null;
        _quickstepLastDirection = QuickStepDir.None;
    }
}

Code "Boost Activation Cost" by "Icedude_907"
//
#include "BlackboardStatus" noemit
#lib "Player"
#import "Plugins"
#lib "Time"

// Each boost ring is 100 - Max in update 3 is 500
// Would like to cut to 300. (Take the RFL Boost level do 100+lv*const and store in capacity)

const float groundBoostCost = 8;
const float airBoostCost = 15;
const float grindBoostCost = 10;  // TODO: Make cost depend on speed delta (increase max to 15)
const float spinBoostExtra = 5;   // Cost going from boost to spin dash.
const float maxLeniency = 10;     // Absorb up to 10% of the activation cost
  // const float infiniBoostDeduction = 0.25; // 25% of the cost i
const float wallBoostRate = 5; // +5% per second
const float airBoostRate = 5;
const float grindBoostRate = 1;
const float leniencyRate = 2;

static float playerBoostCache = 0;
static bool boostDeducted = false;
static BoostType previousState = BoostType.None;
static StatePluginBoost* boostData = null;
static float leniency = 10;

enum BoostType{
    None, Ground, Air, Grind, Wall, Spin
    // Submerged and SubmergedGrounded are handled by the game.
}
//
{
    void deductBoost(float amount){
        // NOTE: This doesn't work correctly in 1.41
        if(boostData->InfiniteBoostTimer > 0.0f){ return; }

        var result = boostData->BoostAmount - amount;
        if(result <= 0.0){ result = 0.0f; }
        boostData->BoostAmount = result;
    }
    BoostType determineType(){
        if(Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpinBoost){
            return BoostType.Spin;
        }
        if(IS_STATE_FLAG(IsAirBoost)){
            return BoostType.Air;
        }
        if(IS_STATE_FLAG(IsBoost)){
            if(IS_STATE_FLAG(IsGrind)){
                return BoostType.Grind;
            }
            if(IS_STATE_FLAG(IsWallClimb)){
                return BoostType.Wall;
            }
            return BoostType.Ground;
        }
        return BoostType.None;
    }

    boostData = Player.State.GetStatePlugin<StatePluginBoost>();
    if (boostData == null) return;

    // Halving the effect of levels:
    // If not the same as the previous frame then the game has updated it,
    // so we half the bonus boost.
    {
        var boostCapacity = boostData->BoostCapacity;
        if(boostCapacity != playerBoostCache){
            var newCapacity = 100 + (boostCapacity-100)/2;
            playerBoostCache = newCapacity;
            boostData->BoostCapacity = newCapacity;
            if(boostData->BoostAmount > newCapacity){ boostData->BoostAmount = newCapacity; }
        }
    }

    // Activation costs
    var type = determineType();
    if(previousState == BoostType.Ground && type == BoostType.Spin){
        deductBoost(spinBoostExtra);
    }
    if(type != BoostType.None && !boostDeducted){
        boostDeducted = true;
        var cost = type switch{
            BoostType.Ground => groundBoostCost,
            BoostType.Air => airBoostCost,
            BoostType.Grind => grindBoostCost,
            BoostType.Spin => groundBoostCost,
            _ => 0.0f,
        };
        cost -= leniency;
        if(cost >= 0.0){
            deductBoost(cost);
        }
    }else if(type == BoostType.None){
        boostDeducted = false;
    }
    // Disable leniency regeneration when boosting
    if(type != BoostType.None){
        leniency = 0;
    }
    // Passive costs
    {
        var delta = Time.GetDeltaTime();
        var isBoostFull = (boostData->BoostAmount >= boostData->BoostCapacity - 1.0f);
        leniency += leniencyRate * delta * (isBoostFull ? 3 : 1); // Leniency regen rate is tripled if boost full
        if(leniency >= maxLeniency){ leniency = maxLeniency; }
        var cost = type switch {
            BoostType.Air => airBoostRate, // Note that this does not refer to airbourne boosting (off edges), but the specific state of airboost.
            BoostType.Wall => wallBoostRate,
            BoostType.Grind => grindBoostRate,
            _ => 0.0f,
        };
        deductBoost(cost * delta);
    }

    previousState = type;
}

Code "Forensics" by "Icedude_907" does "research"
//
    #lib "BlackboardItem"
    #lib "BlackboardBattle"
    #lib "MathHelpers"
    #lib "PhotoMode"
    #lib "Player"
    #lib "XInput"
    #import "Plugins"

    using System.Diagnostics;
    using System.Runtime.InteropServices;

    static bool IsKeyDown(Keys in_keys){
        return (GetAsyncKeyState(in_keys) & 0x8000) != 0;
    }
    [DllImport("user32.dll")]
    static extern IntPtr GetForegroundWindow();
//
{
    if (GetForegroundWindow() != Process.GetCurrentProcess().MainWindowHandle)
        return;

    if(IsKeyDown(Keys.L)){
        var pBlackboardBattle = BlackboardBattle.Get();
        var pBlackboardItem = BlackboardItem.Get();
        var PlayerState = Player.State.GetCurrentStateID<Sonic.StateID>();
        var pStatePluginBoost = Player.State.GetStatePlugin<StatePluginBoost>();
        if (pStatePluginBoost == null) return;
        // I watch the memory here using cheatengine or x64dbg
        // Console.WriteLine($"Debug: battle 0x{(ulong)pBlackboardBattle:X}, item 0x{(ulong)pBlackboardItem:X}: ");
        Console.WriteLine($"PlayerState: {PlayerState.ToString()}");
        // Console.WriteLine($"InfiniBoostAmount: {pStatePluginBoost->InfiniteBoostTimer}");
    }
}